---
gather_subset_of_facts:
  - 'distribution'
daemon_name:            "{{ 'ntp' if 'Ubuntu' == ansible_facts['distribution'] else 'ntpsec' }}"
group:                  "{{ daemon_name }}"
install_packages:
  - 'ntpsec'
# https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1049424
create_files:
  - owner:              'root'
    group:              "{{ group }}"
    mode:               '0775'
    path:               '/var/log/ntpsec'
    state:              'directory'
  - owner:              'root'
    group:              "{{ group }}"
    mode:               '0775'
    path:               '/etc/ntpsec'
    state:              'directory'
template_files:
  - owner:              'root'
    group:              'root'
    mode:               '0644'
    src:                "{{ role_path }}/templates/timezone.j2"
    dest:               '/etc/timezone'
  - owner:              'root'
    group:              'root'
    mode:               '0644'
    src:                'templates/ntp.conf.j2'
    dest:               '/etc/ntpsec/ntp.conf'
symlinks:
  - owner:              'root'
    group:              'root'
    src:                "/usr/share/zoneinfo/{{ timezone }}"
    dest:               '/etc/localtime'
  - owner:              'root'
    group:              'root'
    src:                '/etc/ntpsec/ntp.conf'
    dest:               '/etc/ntp.conf'
lines_in_files:
  # By default, ntpsec looks for a special configuration file dynamically
  # generated by the DHCP client, based on the contents of the real
  # configuration file.  That means stale configuration is still in use after a
  # deployment, even after restarting the ntpsec service is restarted, until
  # "the next DHCP event".  The client also just doesn't need NTP server
  # information from DHCP; it is being supplied by this role.
  - path:               "/etc/default/{{ daemon_name }}"
    line:               "IGNORE_DHCP='yes'"
    regexp:             '^ *IGNORE_DHCP='
enable_services:
  - "{{ daemon_name }}"
start_services:         "{{ enable_services }}"
restart_services:       "{{ enable_services }}"
